import{_ as pe}from"./DetailHeader.vue_vue_type_script_setup_true_lang-fdf67203.js";import{_ as me}from"./ToolDetail.vue_vue_type_script_setup_true_lang-1b5d4adc.js";import{d as ve,z as j,r as V,J as M,o as he,e as I,f as A,g as b,h as _,m as y,j as d,l as w,F as U,i as B,p as g,t as f,v as T,k as ge,U as N,K as W,x as fe,n as ye,_ as be}from"./index-9a231041.js";const xe={class:"flex flex-col mt-3 flex-1"},$e={class:"p-6 rounded-2xl bg-white space-y-6"},_e={class:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"},Se={class:"block text-sm font-medium mb-2"},we={key:0,class:"text-xs text-gray-500"},ke={class:"block text-sm font-medium mb-2"},Ae={class:"flex flex-wrap gap-3"},Te={class:"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-gray-50 rounded-lg"},Re={class:"text-center"},Me={class:"text-2xl font-bold text-blue-600 font-mono"},ze={class:"text-center"},Ce={class:"text-2xl font-bold text-green-600"},Ee={class:"text-center"},Ve={class:"text-2xl font-bold text-purple-600"},Pe={class:"text-center"},De={class:"text-2xl font-bold text-orange-600"},je={key:0,class:"bg-gray-50 p-4 rounded-lg"},Ie={class:"flex justify-between items-center mb-2"},Ue={class:"text-sm font-medium"},Be={key:0,class:"mt-2 text-sm text-blue-600"},Ne={class:"bg-gray-50 p-3 sm:p-6 rounded-lg min-h-[350px] sm:min-h-[400px]"},We={class:"overflow-x-auto"},qe={key:0,class:"text-xs text-gray-500 text-center mt-2"},Fe=ve({__name:"AlgorithmVisualization",setup(Le){const q=j({title:"算法可视化"}),F=[{label:"冒泡排序",value:"bubbleSort"},{label:"选择排序",value:"selectionSort"},{label:"插入排序",value:"insertionSort"},{label:"快速排序",value:"quickSort"},{label:"归并排序",value:"mergeSort"},{label:"堆排序",value:"heapSort"},{label:"希尔排序",value:"shellSort"},{label:"计数排序",value:"countingSort"},{label:"基数排序",value:"radixSort"}],n=j({selectedAlgorithm:"bubbleSort",arraySize:25,animationSpeed:100,isRunning:!1,isPaused:!1,isCompleted:!1,currentStep:0,totalSteps:0,startTime:0,elapsedTime:0,currentRound:0,totalRounds:0,comparisons:0,swaps:0,pausedTime:0,pauseStartTime:0});let S=null;const L=i=>{const t=Math.floor(i/1e3),a=Math.floor(i%1e3/10);return`${t}.${a.toString().padStart(2,"0")}s`},H=()=>{n.isRunning&&!n.isPaused&&(n.elapsedTime=Date.now()-n.startTime-n.pausedTime)},J=()=>{S&&clearInterval(S),S=setInterval(H,50)},R=()=>{S&&(clearInterval(S),S=null)},h=V([]),p=V([]),x=V([]),$=M(()=>window.innerWidth<768),K=M(()=>$.value?15:50),P=M(()=>{const i=window.innerWidth;return i<640?Math.max(12,Math.floor((i-80)/n.arraySize)):i<768?Math.max(16,Math.floor((i-100)/n.arraySize)):32}),k=()=>{const i=$.value?15:50;n.arraySize>i&&(n.arraySize=i),h.value=Array.from({length:n.arraySize},()=>Math.floor(Math.random()*100)+1),p.value=Array(n.arraySize).fill("normal"),n.currentStep=0,n.totalSteps=0,n.isCompleted=!1,n.elapsedTime=0,n.currentRound=0,n.totalRounds=0,n.comparisons=0,n.swaps=0,n.pausedTime=0,n.pauseStartTime=0,x.value=[]},G=()=>{R(),n.isRunning=!1,n.isPaused=!1,n.isCompleted=!1,n.currentStep=0,n.elapsedTime=0,n.currentRound=0,n.comparisons=0,n.swaps=0,n.pausedTime=0,n.pauseStartTime=0,p.value=Array(h.value.length).fill("normal")},O=(i,t)=>{switch(i){case"bubbleSort":return t-1;case"selectionSort":return t-1;case"insertionSort":return t-1;case"quickSort":return Math.ceil(Math.log2(t));case"mergeSort":return Math.ceil(Math.log2(t));case"heapSort":return Math.ceil(Math.log2(t));default:return 0}},Q=i=>{const t=[],a=i.length,e=[...i];let r=0;for(let s=0;s<a-1;s++){r++,t.push({type:"round",round:r,description:`第 ${r} 轮冒泡排序开始`});for(let o=0;o<a-s-1;o++)if(t.push({type:"compare",indices:[o,o+1],description:`比较 ${e[o]} 和 ${e[o+1]}`}),e[o]>e[o+1]){t.push({type:"swap",indices:[o,o+1],description:`交换 ${e[o]} 和 ${e[o+1]}`});const l=e[o];e[o]=e[o+1],e[o+1]=l}t.push({type:"sorted",indices:[a-s-1],description:`位置 ${a-s-1} 已排序完成`})}return t.push({type:"complete",indices:Array.from({length:a},(s,o)=>o),description:"冒泡排序完成"}),console.log("冒泡排序生成的步骤数:",t.length),console.log("比较步骤数:",t.filter(s=>s.type==="compare").length),console.log("交换步骤数:",t.filter(s=>s.type==="swap").length),t},z=(i,t=0,a=i.length-1,e=[],r=0)=>{if(t<a){e.push({type:"round",round:r+1,description:`第 ${r+1} 层递归：处理区间 [${t}, ${a}]`});const s=X(i,t,a,e);e.push({type:"sorted",indices:[s],description:`基准值 ${i[s]} 已放到正确位置 ${s}`}),z(i,t,s-1,e,r+1),z(i,s+1,a,e,r+1),t<s-1?e.push({type:"subsorted",indices:Array.from({length:s-t},(o,l)=>t+l),description:`左子数组 [${t}, ${s-1}] 排序完成`}):t===s-1&&e.push({type:"sorted",indices:[t],description:`元素 ${i[t]} 已排序`}),s+1<a?e.push({type:"subsorted",indices:Array.from({length:a-s},(o,l)=>s+1+l),description:`右子数组 [${s+1}, ${a}] 排序完成`}):s+1===a&&e.push({type:"sorted",indices:[a],description:`元素 ${i[a]} 已排序`})}else t===a&&e.push({type:"sorted",indices:[t],description:`单个元素 ${i[t]} 已排序`});return r===0&&e.push({type:"complete",indices:Array.from({length:i.length},(s,o)=>o),description:"快速排序完成"}),e},X=(i,t,a,e)=>{const r=i[a];let s=t-1;e.push({type:"pivot",indices:[a],description:`选择 ${r} 作为基准值`});for(let l=t;l<a;l++)if(e.push({type:"compare",indices:[l,a],description:`比较 ${i[l]} 和基准值 ${r}`}),i[l]<r&&(s++,s!==l)){e.push({type:"swap",indices:[s,l],description:`交换 ${i[s]} 和 ${i[l]}`});const c=i[s];i[s]=i[l],i[l]=c}e.push({type:"swap",indices:[s+1,a],description:`将基准值 ${r} 放到正确位置 ${s+1}`});const o=i[s+1];return i[s+1]=i[a],i[a]=o,s+1},Y=i=>{const t=[],a=i.length,e=[...i];let r=0;for(let s=0;s<a-1;s++){r++,t.push({type:"round",round:r,description:`第 ${r} 轮选择排序开始`});let o=s;t.push({type:"current",indices:[s],description:`开始处理位置 ${s}`});for(let l=s+1;l<a;l++)t.push({type:"compare",indices:[o,l],description:`比较 ${e[o]} 和 ${e[l]}`}),e[l]<e[o]&&(o=l,t.push({type:"newmin",indices:[o],description:`找到新的最小值 ${e[o]} 在位置 ${o}`}));if(o!==s){t.push({type:"swap",indices:[s,o],description:`交换 ${e[s]} 和 ${e[o]}`});const l=e[s];e[s]=e[o],e[o]=l}t.push({type:"sorted",indices:[s],description:`位置 ${s} 已排序完成`})}return t.push({type:"sorted",indices:[a-1],description:"排序完成"}),t},Z=i=>{const t=[],a=i.length,e=[...i];let r=0;for(let s=1;s<a;s++){r++,t.push({type:"round",round:r,description:`第 ${r} 轮插入排序开始`});const o=e[s];let l=s-1;for(t.push({type:"current",indices:[s],description:`处理元素 ${o} 在位置 ${s}`});l>=0&&e[l]>o;)t.push({type:"compare",indices:[l,s],description:`比较 ${e[l]} 和 ${o}`}),t.push({type:"swap",indices:[l,l+1],description:`将 ${e[l]} 向右移动到位置 ${l+1}`}),e[l+1]=e[l],l--;e[l+1]=o,t.push({type:"insert",indices:[l+1],value:o,description:`将 ${o} 插入到位置 ${l+1}`})}return t.push({type:"complete",indices:Array.from({length:a},(s,o)=>o),description:"插入排序完成"}),console.log("插入排序生成的步骤数:",t.length),console.log("比较步骤数:",t.filter(s=>s.type==="compare").length),console.log("交换步骤数:",t.filter(s=>s.type==="swap").length),t},C=(i,t=0,a=i.length-1,e=[],r=0)=>{if(t<a){const s=Math.floor((t+a)/2);e.push({type:"round",round:r+1,description:`第 ${r+1} 层递归：分割 [${t}, ${a}]`}),e.push({type:"divide",indices:Array.from({length:a-t+1},(o,l)=>t+l),description:`分割数组 [${t}, ${a}] 为 [${t}, ${s}] 和 [${s+1}, ${a}]`}),C(i,t,s,e,r+1),C(i,s+1,a,e,r+1),ee(i,t,s,a,e)}else e.push({type:"sorted",indices:[t],description:`单个元素 ${i[t]} 已排序`});return r===0&&e.push({type:"complete",indices:Array.from({length:i.length},(s,o)=>o),description:"归并排序完成"}),e},ee=(i,t,a,e,r)=>{const s=i.slice(t,a+1),o=i.slice(a+1,e+1);r.push({type:"merge",indices:Array.from({length:e-t+1},(m,v)=>t+v),description:`开始合并 [${t}, ${a}] 和 [${a+1}, ${e}]`});let l=0,c=0,u=t;for(;l<s.length&&c<o.length;)r.push({type:"compare",indices:[u],leftValue:s[l],rightValue:o[c],description:`比较 ${s[l]} 和 ${o[c]}`}),s[l]<=o[c]?(i[u]=s[l],r.push({type:"place",indices:[u],value:s[l],description:`将 ${s[l]} 放置到位置 ${u}`}),l++):(i[u]=o[c],r.push({type:"place",indices:[u],value:o[c],description:`将 ${o[c]} 放置到位置 ${u}`}),c++),u++;for(;l<s.length;)i[u]=s[l],r.push({type:"place",indices:[u],value:s[l],description:`将剩余元素 ${s[l]} 放置到位置 ${u}`}),l++,u++;for(;c<o.length;)i[u]=o[c],r.push({type:"place",indices:[u],value:o[c],description:`将剩余元素 ${o[c]} 放置到位置 ${u}`}),c++,u++;r.push({type:"subsorted",indices:Array.from({length:e-t+1},(m,v)=>t+v),description:`区间 [${t}, ${e}] 合并完成`})},te=i=>{const t=[],a=i.length,e=[...i];let r=0;t.push({type:"round",round:++r,description:"开始构建最大堆"});for(let s=Math.floor(a/2)-1;s>=0;s--)E(e,a,s,t);t.push({type:"heap_built",indices:Array.from({length:a},(s,o)=>o),description:"最大堆构建完成"});for(let s=a-1;s>0;s--){t.push({type:"round",round:++r,description:`第 ${r-1} 轮：提取堆顶元素`}),t.push({type:"swap",indices:[0,s],description:`将堆顶最大值 ${e[0]} 移到位置 ${s}`});const o=e[0];e[0]=e[s],e[s]=o,t.push({type:"sorted",indices:[s],description:`位置 ${s} 已排序完成`}),E(e,s,0,t)}return t.push({type:"sorted",indices:[0],description:"最后一个元素已排序"}),t.push({type:"complete",indices:Array.from({length:a},(s,o)=>o),description:"堆排序完成"}),console.log("堆排序生成的步骤数:",t.length),console.log("比较步骤数:",t.filter(s=>s.type==="compare").length),console.log("交换步骤数:",t.filter(s=>s.type==="swap").length),t},E=(i,t,a,e)=>{let r=a;const s=2*a+1,o=2*a+2;if(e.push({type:"current",indices:[a],description:`调整以位置 ${a} 为根的子堆`}),s<t&&(e.push({type:"compare",indices:[s,r],description:`比较左子节点 ${i[s]} 和当前最大值 ${i[r]}`}),i[s]>i[r]&&(r=s,e.push({type:"newmax",indices:[r],description:`左子节点 ${i[s]} 成为新的最大值`}))),o<t&&(e.push({type:"compare",indices:[o,r],description:`比较右子节点 ${i[o]} 和当前最大值 ${i[r]}`}),i[o]>i[r]&&(r=o,e.push({type:"newmax",indices:[r],description:`右子节点 ${i[o]} 成为新的最大值`}))),r!==a){e.push({type:"swap",indices:[a,r],description:`交换 ${i[a]} 和 ${i[r]} 以维持堆性质`});const l=i[a];i[a]=i[r],i[r]=l,E(i,t,r,e)}},se=i=>{const t=[],a=i.length,e=[...i];let r=0;for(let s=Math.floor(a/2);s>0;s=Math.floor(s/2)){r++,t.push({type:"round",round:r,description:`第 ${r} 轮：间隔为 ${s}`}),t.push({type:"gap_highlight",gap:s,description:`当前间隔: ${s}`});for(let o=s;o<a;o++){const l=e[o];let c=o;for(t.push({type:"current",indices:[o],description:`处理元素 ${l} 在位置 ${o}`});c>=s&&e[c-s]>l;)t.push({type:"compare",indices:[c-s,c],gap:s,description:`比较间隔为${s}的元素: ${e[c-s]} 和 ${l}`}),t.push({type:"swap",indices:[c-s,c],description:`移动 ${e[c-s]} 到位置 ${c}`}),e[c]=e[c-s],c-=s;e[c]=l,c!==o&&t.push({type:"insert",indices:[c],value:l,description:`将 ${l} 插入到位置 ${c}`})}}return t.push({type:"complete",indices:Array.from({length:a},(s,o)=>o),description:"希尔排序完成"}),t},ie=i=>{const t=[],a=i.length,e=[...i],r=Math.max(...e),s=Math.min(...e),o=r-s+1;t.push({type:"round",round:1,description:"第 1 阶段：统计每个元素出现次数"}),t.push({type:"find_range",indices:Array.from({length:a},(u,m)=>m),description:`数组范围: ${s} ~ ${r}，需要 ${o} 个计数桶`});const l=new Array(o).fill(0);for(let u=0;u<a;u++)t.push({type:"counting",indices:[u],value:e[u],countIndex:e[u]-s,description:`统计元素 ${e[u]}，计数桶[${e[u]-s}] += 1`}),l[e[u]-s]++;t.push({type:"count_complete",indices:[],countArray:[...l],description:"统计完成，开始重建数组"}),t.push({type:"round",round:2,description:"第 2 阶段：根据计数重建有序数组"});let c=0;for(let u=0;u<o;u++)for(;l[u]>0;)t.push({type:"rebuild",indices:[c],value:u+s,countIndex:u,description:`从计数桶[${u}]取出 ${u+s} 放到位置 ${c}`}),e[c]=u+s,l[u]--,c++;return t.push({type:"complete",indices:Array.from({length:a},(u,m)=>m),description:"计数排序完成"}),t},ne=i=>{const t=[],a=i.length,e=[...i],r=Math.max(...e),s=r.toString().length;t.push({type:"find_digits",indices:Array.from({length:a},(o,l)=>l),description:`最大值 ${r} 有 ${s} 位，需要进行 ${s} 轮排序`});for(let o=0;o<s;o++){const l=Math.pow(10,o);t.push({type:"round",round:o+1,description:`第 ${o+1} 轮：按第 ${o+1} 位（${o===0?"个":o===1?"十":o===2?"百":o+1}位）排序`});for(let m=0;m<a;m++){const v=Math.floor(e[m]/l)%10;t.push({type:"show_digit",indices:[m],digit:v,digitPosition:o+1,description:`${e[m]} 的第 ${o+1} 位是 ${v}`})}const c=Array.from({length:10},()=>[]);for(let m=0;m<a;m++){const v=Math.floor(e[m]/l)%10;c[v].push(e[m]),t.push({type:"bucket_assign",indices:[m],value:e[m],bucket:v,description:`将 ${e[m]} 放入桶 ${v}`})}let u=0;for(let m=0;m<10;m++)for(let v=0;v<c[m].length;v++)t.push({type:"bucket_collect",indices:[u],value:c[m][v],bucket:m,description:`从桶 ${m} 收集 ${c[m][v]} 到位置 ${u}`}),e[u]=c[m][v],u++;t.push({type:"digit_complete",indices:Array.from({length:a},(m,v)=>v),description:`第 ${o+1} 位排序完成`})}return t.push({type:"complete",indices:Array.from({length:a},(o,l)=>l),description:"基数排序完成"}),t},ae=()=>{const i=[...h.value];switch(n.selectedAlgorithm){case"bubbleSort":return Q(i);case"selectionSort":return Y(i);case"insertionSort":return Z(i);case"quickSort":return z([...i]);case"mergeSort":return C([...i]);case"heapSort":return te(i);case"shellSort":return se(i);case"countingSort":return ie(i);case"radixSort":return ne(i);default:return[]}},oe=i=>{switch(i.type){case"compare":n.comparisons++;break;case"swap":n.swaps++;break;case"move":case"rebuild":case"bucket_assign":case"bucket_collect":n.swaps++;break;case"place":n.swaps++;break;case"round":n.currentRound=i.round||n.currentRound;break}const t=p.value.map((e,r)=>e==="sorted"?r:-1).filter(e=>e!==-1);p.value=Array(h.value.length).fill("normal"),t.forEach(e=>{p.value[e]="sorted"});const a=i.indices||[];switch(i.type){case"compare":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="comparing")});break;case"swap":if(a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="swapping")}),a.length===2){const[e,r]=a,s=h.value[e];h.value[e]=h.value[r],h.value[r]=s}break;case"gap_highlight":if(i.gap)for(let e=0;e<h.value.length;e+=i.gap)p.value[e]!=="sorted"&&(p.value[e]="gap_highlight");break;case"find_range":case"find_digits":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="analyzing")});break;case"counting":a.forEach(e=>{p.value[e]="counting"});break;case"count_complete":p.value.fill("analyzing");break;case"rebuild":a.forEach(e=>{p.value[e]="rebuilding"}),i.value!==void 0&&a.length===1&&(h.value[a[0]]=i.value);break;case"show_digit":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="digit_highlight")});break;case"bucket_assign":a.forEach(e=>{p.value[e]="bucket_assign"});break;case"bucket_collect":a.forEach(e=>{p.value[e]="bucket_collect"}),i.value!==void 0&&a.length===1&&(h.value[a[0]]=i.value);break;case"insert":a.forEach(e=>{p.value[e]="inserting"}),i.value!==void 0&&a.length===1&&(h.value[a[0]]=i.value);break;case"place":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="placing")}),i.value!==void 0&&a.length===1&&(h.value[a[0]]=i.value);break;case"sorted":case"subsorted":case"digit_complete":a.forEach(e=>{p.value[e]="sorted"});break;case"pivot":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="pivot")});break;case"current":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="current")});break;case"newmin":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="newmin")});break;case"newmax":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="newmax")});break;case"divide":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="dividing")});break;case"merge":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="merging")});break;case"heap_built":a.forEach(e=>{p.value[e]!=="sorted"&&(p.value[e]="heap")});break;case"complete":a.forEach(e=>{p.value[e]="sorted"});break}},le=async()=>{if(!n.isRunning){n.isCompleted&&k(),n.isRunning=!0,n.isPaused=!1,n.isCompleted=!1,n.currentStep=0,n.startTime=Date.now(),n.elapsedTime=0,n.currentRound=0,n.comparisons=0,n.swaps=0,n.pausedTime=0,n.pauseStartTime=0,x.value=ae(),n.totalSteps=x.value.length,n.totalRounds=O(n.selectedAlgorithm,h.value.length),J(),console.log("算法步骤:",x.value.map(i=>({type:i.type,description:i.description})));for(let i=0;i<x.value.length&&n.isRunning;i++){for(;n.isPaused;)n.pauseStartTime===0&&(n.pauseStartTime=Date.now()),await new Promise(t=>setTimeout(t,100));n.pauseStartTime>0&&(n.pausedTime+=Date.now()-n.pauseStartTime,n.pauseStartTime=0),n.currentStep=i+1,oe(x.value[i]),console.log(`步骤 ${i+1}: 比较=${n.comparisons}, 交换=${n.swaps}`),await new Promise(t=>setTimeout(t,1e3-n.animationSpeed*10))}R(),n.elapsedTime=Date.now()-n.startTime-n.pausedTime,n.isRunning=!1,n.isCompleted=!0,console.log(`最终统计: 比较=${n.comparisons}, 交换=${n.swaps}`)}},re=()=>{n.isPaused?(n.pauseStartTime>0&&(n.pausedTime+=Date.now()-n.pauseStartTime,n.pauseStartTime=0),n.isPaused=!1):(n.pauseStartTime=Date.now(),n.isPaused=!0)},de=()=>{R(),n.isRunning=!1,n.isPaused=!1,n.isCompleted=!1,G()},ce=i=>{switch(p.value[i]){case"comparing":return"#3b82f6";case"swapping":return"#ef4444";case"sorted":return"#10b981";case"pivot":return"#8b5cf6";case"current":return"#06b6d4";case"newmin":return"#f97316";case"newmax":return"#dc2626";case"moving":return"#ec4899";case"inserting":return"#84cc16";case"dividing":return"#a855f7";case"merging":return"#0ea5e9";case"placing":return"#22c55e";case"heap":return"#f59e0b";case"gap_highlight":return"#8b5cf6";case"analyzing":return"#06b6d4";case"counting":return"#f59e0b";case"rebuilding":return"#10b981";case"digit_highlight":return"#ec4899";case"bucket_assign":return"#f97316";case"bucket_collect":return"#22c55e";default:return"#e5e7eb"}},D=()=>{var i;return n.currentStep>0&&n.currentStep<=x.value.length&&((i=x.value[n.currentStep-1])==null?void 0:i.description)||""},ue=M(()=>n.isRunning?"演示中...":n.isCompleted?"重新演示":"开始演示");return he(()=>{k();const i=()=>{ye(()=>{$.value&&n.arraySize>15&&(n.arraySize=15,k())})};window.addEventListener("resize",i),I(()=>{window.removeEventListener("resize",i)})}),I(()=>{R()}),(i,t)=>{const a=A("el-option"),e=A("el-select"),r=A("el-slider"),s=A("el-button"),o=A("el-progress");return b(),_("div",xe,[y(pe,{title:q.title},null,8,["title"]),d("div",$e,[d("div",_e,[d("div",null,[t[3]||(t[3]=d("label",{class:"block text-sm font-medium mb-2"},"算法类型",-1)),y(e,{modelValue:n.selectedAlgorithm,"onUpdate:modelValue":t[0]||(t[0]=l=>n.selectedAlgorithm=l),disabled:n.isRunning,class:"w-full"},{default:w(()=>[(b(),_(U,null,B(F,l=>y(a,{key:l.value,label:l.label,value:l.value},null,8,["label","value"])),64))]),_:1},8,["modelValue","disabled"])]),d("div",null,[d("label",Se,[g(" 数组大小: "+f(n.arraySize)+" ",1),$.value?(b(),_("span",we,"(手机端最大15)")):T("",!0)]),y(r,{modelValue:n.arraySize,"onUpdate:modelValue":t[1]||(t[1]=l=>n.arraySize=l),min:5,max:K.value,disabled:n.isRunning,"show-tooltip":!1,onChange:k},null,8,["modelValue","max","disabled"])]),d("div",null,[d("label",ke,"动画速度: "+f(n.animationSpeed)+"%",1),y(r,{modelValue:n.animationSpeed,"onUpdate:modelValue":t[2]||(t[2]=l=>n.animationSpeed=l),min:1,max:100,"show-tooltip":!1},null,8,["modelValue"])])]),d("div",Ae,[y(s,{type:"primary",onClick:le,disabled:n.isRunning,loading:n.isRunning},{default:w(()=>[g(f(ue.value),1)]),_:1},8,["disabled","loading"]),n.isRunning?(b(),ge(s,{key:0,onClick:re},{default:w(()=>[g(f(n.isPaused?"继续":"暂停"),1)]),_:1})):T("",!0),y(s,{onClick:de,disabled:!n.isRunning&&!n.isCompleted},{default:w(()=>t[4]||(t[4]=[g(" 停止 ",-1)])),_:1,__:[4]},8,["disabled"]),y(s,{onClick:k,disabled:n.isRunning},{default:w(()=>t[5]||(t[5]=[g(" 生成新数组 ",-1)])),_:1,__:[5]},8,["disabled"])]),d("div",Te,[d("div",Re,[d("div",Me,f(L(n.elapsedTime)),1),t[6]||(t[6]=d("div",{class:"text-sm text-gray-600"},"执行时间",-1))]),d("div",ze,[d("div",Ce,f(n.currentRound)+" / "+f(n.totalRounds),1),t[7]||(t[7]=d("div",{class:"text-sm text-gray-600"},"当前轮数",-1))]),d("div",Ee,[d("div",Ve,f(n.comparisons),1),t[8]||(t[8]=d("div",{class:"text-sm text-gray-600"},"比较次数",-1))]),d("div",Pe,[d("div",De,f(n.swaps),1),t[9]||(t[9]=d("div",{class:"text-sm text-gray-600"},"交换次数",-1))])]),n.totalSteps>0?(b(),_("div",je,[d("div",Ie,[d("span",Ue,"步骤进度: "+f(n.currentStep)+" / "+f(n.totalSteps),1)]),y(o,{percentage:Math.round(n.currentStep/n.totalSteps*100)},null,8,["percentage"]),D()?(b(),_("div",Be,f(D()),1)):T("",!0)])):T("",!0),d("div",Ne,[d("div",We,[d("div",{class:"flex items-end justify-center space-x-1 h-64 sm:h-80 min-w-full",style:N({minWidth:`${Math.max(320,n.arraySize*(P.value+4))}px`})},[(b(!0),_(U,null,B(h.value,(l,c)=>(b(),_("div",{key:c,class:"flex flex-col items-center transition-all duration-300 flex-shrink-0"},[d("div",{class:W(["text-xs mb-1 font-mono",{"text-[10px]":$.value&&n.arraySize>10}])},f(l),3),d("div",{class:"transition-all duration-300 rounded-t-sm",style:N({width:`${P.value}px`,height:`${l/100*($.value?200:250)}px`,backgroundColor:ce(c),minHeight:"15px"})},null,4),d("div",{class:W(["text-xs mt-1 text-gray-500",{"text-[10px]":$.value&&n.arraySize>10}])},f(c),3)]))),128))],4)]),$.value&&n.arraySize>10?(b(),_("div",qe," 💡 可以左右滑动查看完整图表 ")):T("",!0)]),t[10]||(t[10]=fe('<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-10 gap-2 sm:gap-3 text-xs sm:text-sm" data-v-0b1dd98d><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-gray-300 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>未处理</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-blue-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>比较中</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-red-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>交换中</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-green-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>已排序</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-purple-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>基准值/间隔</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-cyan-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>当前处理</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-orange-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>计数/分桶</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-yellow-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>统计中</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-pink-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>数位高亮</span></div><div class="flex items-center space-x-1 sm:space-x-2" data-v-0b1dd98d><div class="w-3 h-3 sm:w-4 sm:h-4 bg-lime-500 rounded flex-shrink-0" data-v-0b1dd98d></div><span class="truncate" data-v-0b1dd98d>重建/收集</span></div></div>',1))]),y(me,{title:"功能说明"},{default:w(()=>t[11]||(t[11]=[d("div",{class:"space-y-4"},[d("div",null,[d("h4",{class:"font-medium mb-2"},"支持的排序算法："),d("ul",{class:"list-disc list-inside space-y-1 text-sm text-gray-600"},[d("li",null,[d("strong",null,"冒泡排序："),g('通过重复遍历数组，比较相邻元素并交换，将最大元素"冒泡"到末尾')]),d("li",null,[d("strong",null,"选择排序："),g("每次选择未排序部分的最小元素，放到已排序部分的末尾")]),d("li",null,[d("strong",null,"插入排序："),g("将元素逐个插入到已排序部分的正确位置")]),d("li",null,[d("strong",null,"快速排序："),g("选择基准值，将数组分为小于和大于基准值的两部分，递归排序")]),d("li",null,[d("strong",null,"归并排序："),g("将数组分为两半，分别排序后合并")]),d("li",null,[d("strong",null,"堆排序："),g("构建最大堆，重复提取最大元素")]),d("li",null,[d("strong",null,"希尔排序："),g("改进的插入排序，通过间隔序列进行多轮插入排序")]),d("li",null,[d("strong",null,"计数排序："),g("统计每个元素出现次数，然后重建有序数组（非比较排序）")]),d("li",null,[d("strong",null,"基数排序："),g("按数位进行多轮计数排序，从低位到高位依次排序")])])]),d("div",null,[d("h4",{class:"font-medium mb-2"},"使用说明："),d("ul",{class:"list-disc list-inside space-y-1 text-sm text-gray-600"},[d("li",null,"选择要演示的排序算法"),d("li",null,"调整数组大小和动画速度"),d("li",null,'点击"开始演示"观看算法执行过程'),d("li",null,"可以随时暂停、继续或停止演示"),d("li",null,"不同颜色表示元素的不同状态"),d("li",null,"实时显示执行时间、轮数、比较次数和交换次数")])])],-1)])),_:1,__:[11]})])}}});const Ge=be(Fe,[["__scopeId","data-v-0b1dd98d"]]);export{Ge as default};
